# Chapter 2: Log Everything! Like K.I.T.T.'s Mission Recorder

Great Scott! In [Chapter 1: Great Scott! Making Animations Easy with `animate_activity_log`](01_animation_facade_animate_activity_log_.qmd), we met `animate_activity_log`, our trusty DeLorean control panel for creating process animations. We saw how it takes the key ingredients and produces a visual masterpiece. But what's the *most* crucial ingredient? It's the script, the minute-by-minute breakdown of the action – the **Event Log**.

Imagine trying to understand what K.I.T.T. did all day just by looking at his parking spot. Impossible! You need his internal logs, telling you *when* he scanned for trouble, *when* he deployed the smokescreen, and *when* he used Turbo Boost. That's exactly what the Event Log does for `vidigi`.

## The Mission: Recording the Action

Think back to our clinic simulation. We need to tell `vidigi` precisely when each patient arrived, when they started waiting, when they began treatment (and with which nurse!), when they finished, and when they left. It's like writing a detailed diary entry for every single patient (or maybe for every droid like R2-D2 on a mission).

Without this detailed log, `animate_activity_log` is like a director with no script – it doesn't know what story to tell! The Event Log provides the raw sequence of events and times that `vidigi` needs to reconstruct the system's dynamics visually.

## The Blueprint: Anatomy of an Event Log

So, what does this "diary" or "log file" look like? It's simply a table, usually a pandas DataFrame, with specific columns that `vidigi` understands. Think of it as the standard report format requested by Devon Miles at FLAG.

Here are the essential columns:

1.  **`patient`:** This is the unique identifier for the entity moving through the system. It could be a patient ID, a serial number for a component (like Johnny 5!), or even a callsign (like 'Maverick' or 'Goose'). Each row in the log belongs to one specific `patient`.
2.  **`event_type`:** This tells `vidigi` the *kind* of activity being recorded. It's like classifying K.I.T.T.'s actions: 'Scanning', 'Driving', 'Special Maneuver'. `vidigi` recognizes specific types:
    *   `arrival_departure`: Marks when the entity enters or leaves the system. These are the opening and closing scenes!
    *   `queue`: Indicates the entity has started waiting for something (like waiting for E.T. to phone home, or waiting for a treatment cubicle).
    *   `resource_use`: Signals that the entity has started using a specific resource (like a nurse seeing a patient, or Ripley getting into a specific Power Loader).
    *   `resource_use_end`: Signals that the entity has *finished* using that specific resource.
3.  **`event`:** This is a more specific *name* for the event that occurred. You get to define most of these! Examples: 'Arrival_Clinic', 'Wait_for_Nurse', 'Start_Treatment', 'End_Treatment', 'Depart_Clinic'.
    *   **Crucial Note:** For `arrival_departure` event types, `vidigi` specifically expects the `event` names to be exactly `'arrival'` and `'depart'`. Don't get creative here, or the system won't know when things start and end! Think of these as the fixed "Power On" and "Shutdown" commands.
4.  **`time`:** This is the timestamp when the event occurred, measured in your simulation's time units (e.g., minutes, hours, parsecs!). It's the "when" for every "what".

**Bonus Column for Resources:**

5.  **`resource_id` (Required for `resource_use` and `resource_use_end`):** When an entity uses a resource (like one of the Ghostbusters using a specific Proton Pack), we need to know *which* one. This column holds the unique ID of the specific resource unit being used or released. This is essential for tracking which specific nurse (Nurse Jackie 1, Nurse Jackie 2, etc.) is busy. We'll talk more about how these IDs come from the [Simpy Resource Enhancement (`CustomResource`, `Store`, `populate_store`)](04_simpy_resource_enhancement_customresource_store_populate_store_.qmd).

## Creating Your Own Log: Let's Get Coding!

Okay, let's build an Event Log for our Top Gun trainees, Maverick and Goose. We'll use `pandas`, the go-to library for data tables in Python.

First, make sure you have pandas imported:

```python
import pandas as pd
```

Now, let's create the data as a list of dictionaries. Each dictionary represents one event (one row in our log):

```python
# Define the events for Maverick and Goose
event_data = [
    # Maverick's Journey
    {'patient': 'Maverick', 'event_type': 'arrival_departure', 'event': 'arrival', 'time': 0},
    {'patient': 'Maverick', 'event_type': 'queue', 'event': 'wait_for_simulator', 'time': 1}, # Starts waiting
    {'patient': 'Maverick', 'event_type': 'resource_use', 'event': 'start_simulator', 'time': 10, 'resource_id': 'Sim_1'}, # Got Simulator 1
    {'patient': 'Maverick', 'event_type': 'resource_use_end', 'event': 'end_simulator', 'time': 50, 'resource_id': 'Sim_1'}, # Finished Sim 1
    {'patient': 'Maverick', 'event_type': 'arrival_departure', 'event': 'depart', 'time': 55},

    # Goose's Journey
    {'patient': 'Goose', 'event_type': 'arrival_departure', 'event': 'arrival', 'time': 5},
    {'patient': 'Goose', 'event_type': 'queue', 'event': 'wait_for_simulator', 'time': 6}, # Starts waiting
    {'patient': 'Goose', 'event_type': 'resource_use', 'event': 'start_simulator', 'time': 15, 'resource_id': 'Sim_2'}, # Got Simulator 2
    {'patient': 'Goose', 'event_type': 'resource_use_end', 'event': 'end_simulator', 'time': 65, 'resource_id': 'Sim_2'}, # Finished Sim 2
    {'patient': 'Goose', 'event_type': 'arrival_departure', 'event': 'depart', 'time': 70}
]

# Convert the list of dictionaries into a pandas DataFrame
event_log_df = pd.DataFrame(event_data)

# Let's see what we made! Print the first few rows.
print("Our Awesome Event Log:")
print(event_log_df.head(10)) # Show first 10 rows
```

This code creates our list of event records and then uses `pd.DataFrame()` to turn it into the table format `vidigi` loves. We print the first 10 rows using `.head(10)` to check our work.

Notice how:
*   Each row has the required columns (`patient`, `event_type`, `event`, `time`).
*   The `resource_use` and `resource_use_end` events also have `resource_id` ('Sim\_1' or 'Sim\_2').
*   The entry and exit points use the mandatory `event` names `'arrival'` and `'depart'` with the `event_type` 'arrival\_departure'.
*   Events are recorded chronologically *per patient*, but the overall log doesn't strictly need to be sorted by time (though it often helps for readability). `vidigi` will figure out the sequence.

This `event_log_df` is exactly what you'd pass into the `animate_activity_log` function we learned about in Chapter 1!

## Under the Hood: How `vidigi` Uses the Log

The Event Log itself is just data – it's like the script lying on the table. It doesn't *do* anything on its own. Other parts of `vidigi` read this script to understand the plot.

The main consumer of the `event_log` is the [`reshape_for_animations`](05_snapshot_preparation_reshape_for_animations_generate_animation_df_.qmd) function (which we'll explore in detail later). Think of `reshape_for_animations` as the assistant director reading the script and figuring out who needs to be where for every single "snapshot" in time.

Here's a simplified idea of what happens when `reshape_for_animations` gets the `event_log`:

```{mermaid}
sequenceDiagram
    participant EL as Event Log (Data)
    participant RFA as reshape_for_animations
    participant Output as Snapshots (Who is where, when)

    RFA->>EL: Read all event records
    Note over RFA: For each time point (e.g., every minute):
    RFA->>EL: Find events that happened *before* this time point for each patient
    RFA->>EL: Identify the *most recent* event for each patient still in the system
    RFA-->>Output: Record patient's current state (event name) at this time point
```

Essentially, `reshape_for_animations` scans through time. At each step (say, every minute), it looks at the `event_log` to determine the *last* thing each active `patient` did. This tells it whether Maverick is currently 'waiting\_for\_simulator' or 'start\_simulator' at that specific minute.

Internally (looking at `vidigi/prep.py`), `reshape_for_animations` might do things like:

```python
# --- Inside reshape_for_animations (Simplified Concept) ---
# (Input: event_log_df)

# Pivot the log to easily find start/end times (like 'arrival', 'depart')
pivoted_log = event_log_df.pivot_table(...)

# Loop through time points (e.g., minute 0, 1, 2...)
for minute in range(simulation_duration):
    # Find patients who arrived before 'minute' and haven't departed yet
    active_patients = find_active_patients(pivoted_log, minute)

    # Filter the original log for these active patients up to 'minute'
    relevant_events = event_log_df[
        (event_log_df['patient'].isin(active_patients)) &
        (event_log_df['time'] <= minute)
    ]

    # For each active patient, find their *very last* event in relevant_events
    latest_states = relevant_events.sort_values('time').groupby('patient').tail(1)

    # Store these latest states as the snapshot for 'minute'
    # ... add to list of snapshots ...

# (Output: A DataFrame where each row is a patient's state at a specific minute)
```

This process transforms the sequential, event-based log into a state-based log, telling us *where* everyone is at *every moment* needed for the animation frames.

## Conclusion: Fueling the Flux Capacitor!

You've now mastered the concept of the **Event Log** – the vital, detailed diary that fuels `vidigi`'s visualizations. It's the raw data stream, the script detailing every significant moment for every entity, captured with specific columns like `patient`, `event_type`, `event`, `time`, and sometimes `resource_id`. Without a good Event Log, our animation DeLorean can't even reach 88 miles per hour!

You learned the required structure and how to create a basic one using pandas. This log is the fundamental input passed to [`animate_activity_log`](01_animation_facade_animate_activity_log_.qmd), which then uses helpers like [`reshape_for_animations`](05_snapshot_preparation_reshape_for_animations_generate_animation_df_.qmd) to process it.

But knowing *what* happened and *when* isn't the whole story. We also need to tell `vidigi` *where* on the screen these events should take place. How do we map 'wait\_for\_simulator' or 'start\_simulator' to actual coordinates? That's the job of the Layout Configuration!

Engage! Let's warp to [Chapter 3: Layout Configuration (`event_position_df`)](03_layout_configuration_event_position_df_.qmd).

---

Generated by [AI Codebase Knowledge Builder](https://github.com/The-Pocket/Tutorial-Codebase-Knowledge)
